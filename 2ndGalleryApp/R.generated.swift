//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 12 storyboards.
  struct storyboard {
    /// Storyboard `AddChosenPhoto`.
    static let addChosenPhoto = _R.storyboard.addChosenPhoto()
    /// Storyboard `AddPhoto`.
    static let addPhoto = _R.storyboard.addPhoto()
    /// Storyboard `CustomActivityIndicatorStoryBoard`.
    static let customActivityIndicatorStoryBoard = _R.storyboard.customActivityIndicatorStoryBoard()
    /// Storyboard `FullImageInfo`.
    static let fullImageInfo = _R.storyboard.fullImageInfo()
    /// Storyboard `Gallery`.
    static let gallery = _R.storyboard.gallery()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainGallery`.
    static let mainGallery = _R.storyboard.mainGallery()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `ProfileS`.
    static let profileS = _R.storyboard.profileS()
    /// Storyboard `ProfileSettings`.
    static let profileSettings = _R.storyboard.profileSettings()
    /// Storyboard `SignIn`.
    static let signIn = _R.storyboard.signIn()
    /// Storyboard `SignUp`.
    static let signUp = _R.storyboard.signUp()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddChosenPhoto", bundle: ...)`
    static func addChosenPhoto(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addChosenPhoto)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddPhoto", bundle: ...)`
    static func addPhoto(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addPhoto)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CustomActivityIndicatorStoryBoard", bundle: ...)`
    static func customActivityIndicatorStoryBoard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.customActivityIndicatorStoryBoard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "FullImageInfo", bundle: ...)`
    static func fullImageInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.fullImageInfo)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Gallery", bundle: ...)`
    static func gallery(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.gallery)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainGallery", bundle: ...)`
    static func mainGallery(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainGallery)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProfileS", bundle: ...)`
    static func profileS(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileS)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProfileSettings", bundle: ...)`
    static func profileSettings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileSettings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SignIn", bundle: ...)`
    static func signIn(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signIn)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SignUp", bundle: ...)`
    static func signUp(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signUp)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 21 images.
  struct image {
    /// Image `BackButton`.
    static let backButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackButton")
    /// Image `CustomLoadActivityIndicator`.
    static let customLoadActivityIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "CustomLoadActivityIndicator")
    /// Image `EnrtySignInLogo`.
    static let enrtySignInLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "EnrtySignInLogo")
    /// Image `EntryFirstScreenLogo`.
    static let entryFirstScreenLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "EntryFirstScreenLogo")
    /// Image `EntryFirstScreenSignInButton`.
    static let entryFirstScreenSignInButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "EntryFirstScreenSignInButton")
    /// Image `EntryFirstScreenSignUpButton`.
    static let entryFirstScreenSignUpButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "EntryFirstScreenSignUpButton")
    /// Image `EntrySignInSignInButton`.
    static let entrySignInSignInButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "EntrySignInSignInButton")
    /// Image `EntrySignInSignUpButton`.
    static let entrySignInSignUpButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "EntrySignInSignUpButton")
    /// Image `EntrySignUpLogo`.
    static let entrySignUpLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "EntrySignUpLogo")
    /// Image `EntrySignUpSignUpButton`.
    static let entrySignUpSignUpButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "EntrySignUpSignUpButton")
    /// Image `EntrySignUpSingInButton`.
    static let entrySignUpSingInButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "EntrySignUpSingInButton")
    /// Image `ErrorIcon`.
    static let errorIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ErrorIcon")
    /// Image `FirstBarImage`.
    static let firstBarImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "FirstBarImage")
    /// Image `LoadingImage`.
    static let loadingImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoadingImage")
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `ProfileSettingsButton`.
    static let profileSettingsButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileSettingsButton")
    /// Image `ProfileUserPhoto`.
    static let profileUserPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileUserPhoto")
    /// Image `SecondBarImage`.
    static let secondBarImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "SecondBarImage")
    /// Image `ThirdBarImage`.
    static let thirdBarImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "ThirdBarImage")
    /// Image `Welcome!`.
    static let welcome = Rswift.ImageResource(bundle: R.hostingBundle, name: "Welcome!")
    /// Image `profileLine`.
    static let profileLine = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileLine")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BackButton", bundle: ..., traitCollection: ...)`
    static func backButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CustomLoadActivityIndicator", bundle: ..., traitCollection: ...)`
    static func customLoadActivityIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customLoadActivityIndicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EnrtySignInLogo", bundle: ..., traitCollection: ...)`
    static func enrtySignInLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.enrtySignInLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EntryFirstScreenLogo", bundle: ..., traitCollection: ...)`
    static func entryFirstScreenLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.entryFirstScreenLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EntryFirstScreenSignInButton", bundle: ..., traitCollection: ...)`
    static func entryFirstScreenSignInButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.entryFirstScreenSignInButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EntryFirstScreenSignUpButton", bundle: ..., traitCollection: ...)`
    static func entryFirstScreenSignUpButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.entryFirstScreenSignUpButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EntrySignInSignInButton", bundle: ..., traitCollection: ...)`
    static func entrySignInSignInButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.entrySignInSignInButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EntrySignInSignUpButton", bundle: ..., traitCollection: ...)`
    static func entrySignInSignUpButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.entrySignInSignUpButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EntrySignUpLogo", bundle: ..., traitCollection: ...)`
    static func entrySignUpLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.entrySignUpLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EntrySignUpSignUpButton", bundle: ..., traitCollection: ...)`
    static func entrySignUpSignUpButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.entrySignUpSignUpButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EntrySignUpSingInButton", bundle: ..., traitCollection: ...)`
    static func entrySignUpSingInButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.entrySignUpSingInButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ErrorIcon", bundle: ..., traitCollection: ...)`
    static func errorIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.errorIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FirstBarImage", bundle: ..., traitCollection: ...)`
    static func firstBarImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.firstBarImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoadingImage", bundle: ..., traitCollection: ...)`
    static func loadingImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadingImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProfileSettingsButton", bundle: ..., traitCollection: ...)`
    static func profileSettingsButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileSettingsButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProfileUserPhoto", bundle: ..., traitCollection: ...)`
    static func profileUserPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileUserPhoto, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SecondBarImage", bundle: ..., traitCollection: ...)`
    static func secondBarImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.secondBarImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ThirdBarImage", bundle: ..., traitCollection: ...)`
    static func thirdBarImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thirdBarImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Welcome!", bundle: ..., traitCollection: ...)`
    static func welcome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileLine", bundle: ..., traitCollection: ...)`
    static func profileLine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileLine, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `MainGalleryCollectionViewCell`.
    static let mainGalleryCollectionViewCell = _R.nib._MainGalleryCollectionViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MainGalleryCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainGalleryCollectionViewCell) instead")
    static func mainGalleryCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainGalleryCollectionViewCell)
    }
    #endif

    static func mainGalleryCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MainGalleryCollectionViewCell? {
      return R.nib.mainGalleryCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainGalleryCollectionViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MainGalleryFooterCollectionReusableView`.
    static let mainGalleryFooterCollectionReusableView: Rswift.ReuseIdentifier<MainGalleryFooterCollectionReusableView> = Rswift.ReuseIdentifier(identifier: "MainGalleryFooterCollectionReusableView")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.alert` struct is generated, and contains static references to 15 localization keys.
    struct alert {
      /// en translation: Acc is Deleted
      ///
      /// Locales: en, ru
      static let accIsDeleteMessage = Rswift.StringResource(key: "AccIsDeleteMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Auth is ok
      ///
      /// Locales: en, ru
      static let authIsOkMessage = Rswift.StringResource(key: "AuthIsOkMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, ru
      static let errorMessage = Rswift.StringResource(key: "ErrorMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Fill all fields
      ///
      /// Locales: en, ru
      static let emptyFieldsMessage = Rswift.StringResource(key: "EmptyFieldsMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: en, ru
      static let galleryMessage = Rswift.StringResource(key: "GalleryMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Go to Settings
      ///
      /// Locales: en, ru
      static let settingsMessage = Rswift.StringResource(key: "SettingsMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: No access
      ///
      /// Locales: en, ru
      static let noAccessMessage = Rswift.StringResource(key: "NoAccessMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: No image
      ///
      /// Locales: en, ru
      static let noImageMessage = Rswift.StringResource(key: "NoImageMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en, ru
      static let okMessage = Rswift.StringResource(key: "OkMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Passwords not match
      ///
      /// Locales: en, ru
      static let passwordsNotMatch = Rswift.StringResource(key: "PasswordsNotMatch", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Succsess
      ///
      /// Locales: en, ru
      static let succsessMessage = Rswift.StringResource(key: "SuccsessMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: cancel
      ///
      /// Locales: en, ru
      static let cancelMessage = Rswift.StringResource(key: "CancelMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: no data
      ///
      /// Locales: en, ru
      static let nodataMessage = Rswift.StringResource(key: "NodataMessage", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: use camera
      ///
      /// Locales: en, ru
      static let cameraString = Rswift.StringResource(key: "CameraString", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: use gallery
      ///
      /// Locales: en, ru
      static let galleryString = Rswift.StringResource(key: "GalleryString", tableName: "Alert", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: Acc is Deleted
      ///
      /// Locales: en, ru
      static func accIsDeleteMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AccIsDeleteMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "AccIsDeleteMessage"
        }

        return NSLocalizedString("AccIsDeleteMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: Auth is ok
      ///
      /// Locales: en, ru
      static func authIsOkMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AuthIsOkMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "AuthIsOkMessage"
        }

        return NSLocalizedString("AuthIsOkMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, ru
      static func errorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ErrorMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "ErrorMessage"
        }

        return NSLocalizedString("ErrorMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: Fill all fields
      ///
      /// Locales: en, ru
      static func emptyFieldsMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EmptyFieldsMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "EmptyFieldsMessage"
        }

        return NSLocalizedString("EmptyFieldsMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: en, ru
      static func galleryMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GalleryMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "GalleryMessage"
        }

        return NSLocalizedString("GalleryMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: Go to Settings
      ///
      /// Locales: en, ru
      static func settingsMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SettingsMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "SettingsMessage"
        }

        return NSLocalizedString("SettingsMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: No access
      ///
      /// Locales: en, ru
      static func noAccessMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoAccessMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "NoAccessMessage"
        }

        return NSLocalizedString("NoAccessMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: No image
      ///
      /// Locales: en, ru
      static func noImageMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NoImageMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "NoImageMessage"
        }

        return NSLocalizedString("NoImageMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en, ru
      static func okMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OkMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "OkMessage"
        }

        return NSLocalizedString("OkMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: Passwords not match
      ///
      /// Locales: en, ru
      static func passwordsNotMatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PasswordsNotMatch", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "PasswordsNotMatch"
        }

        return NSLocalizedString("PasswordsNotMatch", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: Succsess
      ///
      /// Locales: en, ru
      static func succsessMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SuccsessMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "SuccsessMessage"
        }

        return NSLocalizedString("SuccsessMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: cancel
      ///
      /// Locales: en, ru
      static func cancelMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "CancelMessage"
        }

        return NSLocalizedString("CancelMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: no data
      ///
      /// Locales: en, ru
      static func nodataMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NodataMessage", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "NodataMessage"
        }

        return NSLocalizedString("NodataMessage", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: use camera
      ///
      /// Locales: en, ru
      static func cameraString(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CameraString", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "CameraString"
        }

        return NSLocalizedString("CameraString", tableName: "Alert", bundle: bundle, comment: "")
      }

      /// en translation: use gallery
      ///
      /// Locales: en, ru
      static func galleryString(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GalleryString", tableName: "Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alert", preferredLanguages: preferredLanguages) else {
          return "GalleryString"
        }

        return NSLocalizedString("GalleryString", tableName: "Alert", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 2 localization keys.
    struct main {
      /// ru translation: Button
      ///
      /// Locales: ru
      static let hLqCeV8rNormalTitle = Rswift.StringResource(key: "hLq-ce-V8r.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let vnzDGLTYNormalTitle = Rswift.StringResource(key: "Vnz-dG-LTY.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)

      /// ru translation: Button
      ///
      /// Locales: ru
      static func hLqCeV8rNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hLq-ce-V8r.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hLq-ce-V8r.normalTitle"
        }

        return NSLocalizedString("hLq-ce-V8r.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func vnzDGLTYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vnz-dG-LTY.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Vnz-dG-LTY.normalTitle"
        }

        return NSLocalizedString("Vnz-dG-LTY.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _MainGalleryCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MainGalleryCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MainGalleryCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainGalleryCollectionViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try addChosenPhoto.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try addPhoto.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try customActivityIndicatorStoryBoard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try fullImageInfo.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try gallery.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainGallery.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profileS.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profileSettings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try signIn.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try signUp.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct addChosenPhoto: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addChosenPhoto = StoryboardViewControllerResource<AddChosenPhotoViewController>(identifier: "AddChosenPhoto")
      let bundle = R.hostingBundle
      let name = "AddChosenPhoto"

      func addChosenPhoto(_: Void = ()) -> AddChosenPhotoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addChosenPhoto)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.addChosenPhoto().addChosenPhoto() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addChosenPhoto' could not be loaded from storyboard 'AddChosenPhoto' as 'AddChosenPhotoViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct addPhoto: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AddPhotoViewController

      let bundle = R.hostingBundle
      let name = "AddPhoto"

      static func validate() throws {
        if UIKit.UIImage(named: "ProfileUserPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfileUserPhoto' is used in storyboard 'AddPhoto', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct customActivityIndicatorStoryBoard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let customActivity = StoryboardViewControllerResource<CustomActivityIndicatorViewController>(identifier: "CustomActivity")
      let name = "CustomActivityIndicatorStoryBoard"

      func customActivity(_: Void = ()) -> CustomActivityIndicatorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customActivity)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "CustomLoadActivityIndicator", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CustomLoadActivityIndicator' is used in storyboard 'CustomActivityIndicatorStoryBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LoadingImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LoadingImage' is used in storyboard 'CustomActivityIndicatorStoryBoard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.customActivityIndicatorStoryBoard().customActivity() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customActivity' could not be loaded from storyboard 'CustomActivityIndicatorStoryBoard' as 'CustomActivityIndicatorViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct fullImageInfo: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let fullImageInfo = StoryboardViewControllerResource<FullImageInfoViewController>(identifier: "FullImageInfo")
      let name = "FullImageInfo"

      func fullImageInfo(_: Void = ()) -> FullImageInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fullImageInfo)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.fullImageInfo().fullImageInfo() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fullImageInfo' could not be loaded from storyboard 'FullImageInfo' as 'FullImageInfoViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct gallery: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainGalleryViewController

      let bundle = R.hostingBundle
      let name = "Gallery"

      static func validate() throws {
        if UIKit.UIImage(named: "CustomLoadActivityIndicator", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CustomLoadActivityIndicator' is used in storyboard 'Gallery', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ErrorIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ErrorIcon' is used in storyboard 'Gallery', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "EntryFirstScreenLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EntryFirstScreenLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let entryNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "EntryNavigationController")
      let name = "Main"
      let startViewController = StoryboardViewControllerResource<StartViewController>(identifier: "StartViewController")

      func entryNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: entryNavigationController)
      }

      func startViewController(_: Void = ()) -> StartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: startViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "EntryFirstScreenLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EntryFirstScreenLogo' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().entryNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'entryNavigationController' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().startViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'startViewController' could not be loaded from storyboard 'Main' as 'StartViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainGallery: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController

      let bundle = R.hostingBundle
      let mainGalleryTabBarController = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "MainGalleryTabBarController")
      let name = "MainGallery"

      func mainGalleryTabBarController(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainGalleryTabBarController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "FirstBarImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FirstBarImage' is used in storyboard 'MainGallery', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SecondBarImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SecondBarImage' is used in storyboard 'MainGallery', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ThirdBarImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ThirdBarImage' is used in storyboard 'MainGallery', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mainGallery().mainGalleryTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainGalleryTabBarController' could not be loaded from storyboard 'MainGallery' as 'UIKit.UITabBarController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profileS: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileViewController

      let bundle = R.hostingBundle
      let name = "ProfileS"

      static func validate() throws {
        if UIKit.UIImage(named: "ErrorIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ErrorIcon' is used in storyboard 'ProfileS', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ProfileSettingsButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfileSettingsButton' is used in storyboard 'ProfileS', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ProfileUserPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfileUserPhoto' is used in storyboard 'ProfileS', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profileLine", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileLine' is used in storyboard 'ProfileS', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profileSettings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileSettings"
      let profileSettings = StoryboardViewControllerResource<ProfileSettingsViewController>(identifier: "ProfileSettings")

      func profileSettings(_: Void = ()) -> ProfileSettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileSettings)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ProfileUserPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfileUserPhoto' is used in storyboard 'ProfileSettings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profileLine", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileLine' is used in storyboard 'ProfileSettings', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.profileSettings().profileSettings() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileSettings' could not be loaded from storyboard 'ProfileSettings' as 'ProfileSettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct signIn: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignIn"
      let signInViewController = StoryboardViewControllerResource<SignInViewController>(identifier: "SignInViewController")

      func signInViewController(_: Void = ()) -> SignInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "EnrtySignInLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EnrtySignInLogo' is used in storyboard 'SignIn', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.signIn().signInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'SignIn' as 'SignInViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct signUp: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignUp"
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")

      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "EntrySignUpLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EntrySignUpLogo' is used in storyboard 'SignUp', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.signUp().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'SignUp' as 'SignUpViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
